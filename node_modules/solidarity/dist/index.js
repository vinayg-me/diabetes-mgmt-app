"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const gluegun_1 = require("gluegun");
const os = require('os');
module.exports = () => __awaiter(this, void 0, void 0, function* () {
    // setup the runtime
    const cli = gluegun_1.build()
        .brand('solidarity')
        .src(__dirname)
        // local installs
        .plugins('./node_modules', { matching: 'solidarity-*', hidden: true })
        // global installs
        .plugins('/usr/local/lib/node_modules', { matching: 'solidarity-*', hidden: true }) // Darwin
        .plugins(`${os.homedir()}/.config/yarn/global/node_modules`, { matching: 'solidarity-*', hidden: true }) // Yarn/Darwin
        .plugins(`${process.env.appdata}/npm/node_modules`, { matching: 'solidarity-*', hidden: true }); // Windows
    // for testing - force load a local plugin
    // .plugin('../solidarity-react-native')
    // when a module parameter is passed we take the plugins from there, too
    const parsedArgs = require('yargs-parser')(process.argv.slice(2));
    const moduleName = parsedArgs.m || parsedArgs.module;
    if (moduleName)
        cli.plugins(`./node_modules/${moduleName}/node_modules`, { matching: 'solidarity-*', hidden: true });
    cli.create().run();
});
__export(require("./types"));
//# sourceMappingURL=index.js.map