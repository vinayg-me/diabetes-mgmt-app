"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
var Solidarity;
(function (Solidarity) {
    const { map, toPairs, isEmpty, flatten, reject, isNil } = require('ramda');
    const checkForEscapeHatchFlags = (context) => __awaiter(this, void 0, void 0, function* () {
        const { print, parameters } = context;
        const { options } = parameters;
        if (!options)
            return;
        if (options.help || options.h) {
            // Just looking for help
            print.printCommands(context);
            process.exit(0);
        }
        else if (options.version || options.v) {
            // Just looking for version
            print.info(require('../../package.json').version);
            process.exit(0);
        }
    });
    const setOutputMode = (parameters, settings) => {
        const { options } = parameters;
        // CLI flags override config
        if (options.verbose || options.a) {
            return types_1.SolidarityOutputMode.VERBOSE;
        }
        else if (options.silent || options.s) {
            return types_1.SolidarityOutputMode.SILENT;
        }
        else if (options.moderate || options.m) {
            return types_1.SolidarityOutputMode.MODERATE;
        }
        // Set output mode, set to default on invalid value
        let outputModeString = settings.config ? String(settings.config.output).toUpperCase() : 'MODERATE';
        return types_1.SolidarityOutputMode[outputModeString] || types_1.SolidarityOutputMode.MODERATE;
    };
    Solidarity.run = (context) => __awaiter(this, void 0, void 0, function* () {
        // Node Modules Quirk
        require('../extensions/functions/quirksNodeModules');
        // drop out fast in these situations
        yield checkForEscapeHatchFlags(context);
        const { print, solidarity } = context;
        const { checkRequirement, getSolidaritySettings } = solidarity;
        // get settings or error
        let solidaritySettings;
        try {
            solidaritySettings = yield getSolidaritySettings(context);
        }
        catch (e) {
            print.error(e);
            print.info(`Make sure you are in the correct folder or run ${print.colors.success('solidarity snapshot')} to take a snapshot of your environment and create a .solidarity file for this project.`);
            process.exit(3);
        }
        // Merge flags and configs
        context.outputMode = setOutputMode(context.parameters, solidaritySettings);
        // build map of checks to perform
        const checks = yield map((requirement) => __awaiter(this, void 0, void 0, function* () { return checkRequirement(requirement, context); }), toPairs(solidaritySettings.requirements));
        // run the array of promises you just created
        yield Promise.all(checks)
            .then(results => {
            const errors = reject(isNil, flatten(results));
            const silentOutput = context.outputMode === types_1.SolidarityOutputMode.SILENT;
            // Add empty line between final result if printing rule results
            if (!silentOutput)
                print.success('');
            if (isEmpty(errors)) {
                if (!silentOutput)
                    print.success(print.checkmark + ' Solidarity checks valid');
            }
            else {
                if (!silentOutput)
                    print.error('Solidarity checks failed.');
                process.exit(1);
            }
        })
            .catch(err => {
            print.error(err);
            process.exit(2);
        });
    });
})(Solidarity || (Solidarity = {}));
// Export command
module.exports = {
    description: 'Check environment against solidarity rules',
    run: Solidarity.run,
};
//# sourceMappingURL=solidarity.js.map