"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const solidarityReport_1 = require("../extensions/functions/solidarityReport");
module.exports = {
    alias: 'r',
    description: 'Report solidarity info about the current machine',
    run: (context) => __awaiter(this, void 0, void 0, function* () {
        const { print, solidarity, system } = context;
        const reportTimer = system.startTimer();
        const { getSolidaritySettings, reviewRule, printResults } = solidarity;
        // Node Modules Quirk
        require('../extensions/functions/quirksNodeModules');
        const spinner = print.spin('Building Report');
        // get settings or error
        let solidaritySettings;
        try {
            solidaritySettings = yield getSolidaritySettings(context);
        }
        catch (e) {
            spinner.fail(`No valid ${print.colors.success('solidarity')} file was found to report.`);
            process.exit(3);
        }
        let results = yield solidarityReport_1.createReport(context);
        // break all rules into requirements
        const reportCalls = ramda_1.map((requirement) => __awaiter(this, void 0, void 0, function* () { return reviewRule(requirement, results, context); }), ramda_1.toPairs(solidaritySettings.requirements));
        // run the array of promises you just created
        yield Promise.all(reportCalls)
            .then(reportResults => {
            results.basicInfo.push([
                'Report Info',
                `${new Date().toLocaleString()} (in ${(reportTimer() / 1000).toFixed(2)}s)`,
            ]);
            spinner.stop();
            printResults(results, context);
        })
            .catch(err => {
            print.error(`\n\n${err}`);
            process.exit(2);
        });
    }),
};
//# sourceMappingURL=report.js.map