"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = require("ramda");
const appendNewRequirement = (solidaritySettings, existingRequirementRules, newRequirement, newRequirementKey) => {
    return Object.assign({}, solidaritySettings, { requirements: Object.assign({}, solidaritySettings.requirements, { [newRequirementKey]: [...existingRequirementRules, ...newRequirement[newRequirementKey]] }) });
};
const updateExistingRule = (solidaritySettings, updatedRequirementRules, newRequirement, newRequirementKey) => {
    return Object.assign({}, solidaritySettings, { requirements: Object.assign({}, solidaritySettings.requirements, { [newRequirementKey]: updatedRequirementRules }) });
};
module.exports = (context, newRequirement) => __awaiter(this, void 0, void 0, function* () {
    const { solidarity, parameters } = context;
    const { getSolidaritySettings, ruleHandlers } = solidarity;
    const { first } = parameters;
    const solidaritySettings = yield getSolidaritySettings(context);
    const newRequirementKey = ramda_1.keys(newRequirement)[0];
    const existingRequirementRules = solidaritySettings.requirements[newRequirementKey] || [];
    let existingRule;
    let existingRuleIndex = -1;
    if (existingRequirementRules.length) {
        const primaryRuleKey = ruleHandlers[first].key;
        const filterFunction = ramda_1.pipe(obj => ramda_1.propEq('rule', first), obj => ramda_1.propEq(primaryRuleKey, newRequirement[newRequirementKey][0][primaryRuleKey]));
        // @ts-ignore - filterFunction not playing well with filter.
        existingRule = ramda_1.filter(filterFunction, existingRequirementRules);
        existingRuleIndex = ramda_1.findIndex(ramda_1.propEq(primaryRuleKey, newRequirement[newRequirementKey][0][primaryRuleKey]), existingRequirementRules);
    }
    if (existingRule && existingRule[0] && existingRuleIndex !== -1) {
        const updatedRule = ramda_1.merge(existingRule[existingRuleIndex], newRequirement[newRequirementKey][0]);
        const updatedRequirementRules = ramda_1.update(existingRuleIndex, updatedRule)(existingRequirementRules);
        return updateExistingRule(solidaritySettings, updatedRequirementRules, newRequirement, newRequirementKey);
    }
    return appendNewRequirement(solidaritySettings, existingRequirementRules, newRequirement, newRequirementKey);
});
//# sourceMappingURL=appendSolidaritySettings.js.map