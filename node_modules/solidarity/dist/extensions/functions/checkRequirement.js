"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../types");
const checkCLI = require('./checkCLI');
const checkENV = require('./checkENV');
const checkDir = require('./checkDir');
const checkFile = require('./checkFile');
const checkShell = require('./checkShell');
const skipRule = require('./skipRule');
const findPluginInfo = require('./findPluginInfo');
module.exports = (requirement, context) => __awaiter(this, void 0, void 0, function* () {
    const { head, tail, pipe, flatten, map } = require('ramda');
    const { print } = context;
    const requirementName = head(requirement);
    const rules = pipe(tail, flatten)(requirement);
    let ruleString = '';
    // Hide spinner if silent outputmode is set
    const spinner = context.outputMode !== types_1.SolidarityOutputMode.SILENT ? print.spin(`Verifying ${requirementName}`) : null;
    const assertNever = (value) => {
        throw Error(`Unexpected value '${value}'`);
    };
    const printResult = (checkSuccessful, resultMessage) => {
        switch (context.outputMode) {
            case types_1.SolidarityOutputMode.VERBOSE:
                // Print everything
                checkSuccessful ? spinner.succeed(resultMessage) : spinner.fail(resultMessage);
                break;
            case types_1.SolidarityOutputMode.SILENT:
                // Print nothing
                break;
            case types_1.SolidarityOutputMode.MODERATE:
            case undefined:
                // Print only errors
                if (!checkSuccessful) {
                    spinner.fail(resultMessage);
                }
                break;
            default:
                // enforce via typescript, no unhandled modes
                // will fail tsc if new enums added
                assertNever(context.outputMode);
                break;
        }
    };
    const addFailure = (failureMessage) => {
        printResult(false, failureMessage);
        return failureMessage;
    };
    const addSuccess = (successMessage) => {
        printResult(true, successMessage);
        return [];
    };
    // check each rule for requirement
    const ruleChecks = yield map((rule) => __awaiter(this, void 0, void 0, function* () {
        // Make sure this rule is active
        if (skipRule(rule))
            return [];
        switch (rule.rule) {
            // Handle CLI rule check
            case 'cli':
                const cliResult = yield checkCLI(rule, context);
                const semverRequirement = rule.semver || '';
                ruleString = `${requirementName} - ${rule.binary} binary ${semverRequirement}`;
                if (cliResult) {
                    return addFailure(cliResult);
                }
                else {
                    return addSuccess(ruleString);
                }
            // Handle ENV rule check
            case 'env':
                const envResult = yield checkENV(rule, context);
                ruleString = `${requirementName} - ${rule.variable} env`;
                if (envResult) {
                    return addSuccess(ruleString);
                }
                else {
                    return addFailure(rule.error || `'$${rule.variable}' environment variable not found`);
                }
            // Handle dir rule check
            case 'directory':
            case 'dir':
                const dirResult = checkDir(rule, context);
                ruleString = `${requirementName} - ${rule.location} directory`;
                if (dirResult) {
                    return addSuccess(ruleString);
                }
                else {
                    return addFailure(rule.error || `'${rule.location}' directory not found`);
                }
            // Handle file rule check
            case 'file':
                const fileResult = checkFile(rule, context);
                ruleString = `${requirementName} - ${rule.location} file`;
                if (fileResult) {
                    return addSuccess(ruleString);
                }
                else {
                    return addFailure(rule.error || `'${rule.location}' file not found`);
                }
            // Handle the shell rule
            case 'shell':
                const shellResult = yield checkShell(rule, context);
                if (shellResult) {
                    ruleString = `${requirementName} - '${rule.command}' matches '${rule.match}'`;
                    return addSuccess(ruleString);
                }
                else {
                    return addFailure(rule.error || `'${rule.command}' output did not match '${rule.match}'`);
                }
            case 'custom':
                const customPluginRule = findPluginInfo(rule, context);
                if (customPluginRule.success) {
                    // No check provided, we jet
                    if (!customPluginRule.plugin.check)
                        return [];
                    const customResult = yield customPluginRule.plugin.check(rule, context);
                    if (customResult && customResult.pass) {
                        return addSuccess(customResult.message);
                    }
                    else {
                        const failMessage = customResult && customResult.message
                            ? customResult.message
                            : `${requirementName} - rule '${rule.plugin}' '${rule.name}' failed`;
                        return addFailure(rule.error || failMessage);
                    }
                }
                else {
                    return addFailure(customPluginRule.message);
                }
            default:
                return addFailure('Encountered unknown rule');
        }
    }), rules);
    // Run all the rule checks for a requirement
    return Promise.all(ruleChecks)
        .then(results => {
        if (spinner !== null) {
            spinner.stop();
        }
        return results;
    })
        .catch(err => print.error(err));
});
//# sourceMappingURL=checkRequirement.js.map