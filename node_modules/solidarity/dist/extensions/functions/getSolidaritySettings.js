"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const getSolidarityHelpers_1 = require("./getSolidarityHelpers");
const JSON5 = require("json5");
module.exports = (context) => __awaiter(this, void 0, void 0, function* () {
    const { filesystem, parameters } = context;
    const options = parameters.options || {}; // fix possibly undefined from gluegun
    const demandedFile = options.solidarityFile || options.f;
    const demandedModule = options.module || options.d;
    const demandedCheck = options.stack || options.t;
    /* for now only JSON and JSON5 support
    * Summary:
    * Looks for `.solidarity` or `.solidarity.json` files
    * Unless you pass parameter options telling us to look
    * in specific paths, node modules, or websites
    */
    let solidaritySettings;
    if (demandedFile) {
        solidaritySettings = getSolidarityHelpers_1.loadFile(context, demandedFile);
    }
    else if (demandedModule) {
        solidaritySettings = getSolidarityHelpers_1.loadModule(context, demandedModule);
    }
    else if (demandedCheck) {
        solidaritySettings = yield getSolidarityHelpers_1.loadWebCheck(context, demandedCheck);
    }
    else if (filesystem.exists('.solidarity')) {
        solidaritySettings = JSON5.parse(filesystem.read('.solidarity'));
    }
    else if (filesystem.exists('.solidarity.json')) {
        solidaritySettings = JSON5.parse(filesystem.read('.solidarity.json'));
    }
    else {
        // if we got here there was no solidarity file
        throw 'ERROR: No solidarity file was found';
    }
    // Check shape
    if (solidaritySettings.requirements) {
        return solidaritySettings;
    }
    else {
        throw 'ERROR: Found, but no requirements key.  Please validate your solidarity file';
    }
});
//# sourceMappingURL=getSolidaritySettings.js.map