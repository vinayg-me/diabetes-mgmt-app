"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var camelCase = require("lodash.camelcase");
var kebabCase = require("lodash.kebabcase");
var lowerCase = require("lodash.lowercase");
var lowerFirst = require("lodash.lowerfirst");
var pad = require("lodash.pad");
var padEnd = require("lodash.padend");
var padStart = require("lodash.padstart");
var repeat = require("lodash.repeat");
var snakeCase = require("lodash.snakecase");
var startCase = require("lodash.startcase");
var trim = require("lodash.trim");
var trimEnd = require("lodash.trimend");
var trimStart = require("lodash.trimstart");
var upperCase = require("lodash.uppercase");
var upperFirst = require("lodash.upperfirst");
var pluralize = require("pluralize");
/**
 * Is this not a string?
 *
 * @param value The value to check
 * @return True if it is not a string, otherwise false
 */
function isNotString(value) {
    return !ramda_1.is(String, value);
}
/**
 * Is this value a blank string?
 *
 * @param value The value to check.
 * @returns True if it was, otherwise false.
 */
function isBlank(value) {
    return isNotString(value) || ramda_1.isEmpty(trim(value));
}
/**
 * Returns the value it is given
 *
 * @param value
 * @returns the value.
 */
function identity(value) {
    return value;
}
/**
 * Converts the value ToPascalCase.
 *
 * @param value The string to convert
 * @returns PascalCase string.
 */
function pascalCase(value) {
    return ramda_1.pipe(camelCase, upperFirst)(value);
}
exports.strings = {
    isNotString: isNotString,
    isBlank: isBlank,
    identity: identity,
    pascalCase: pascalCase,
    camelCase: camelCase,
    kebabCase: kebabCase,
    lowerCase: lowerCase,
    lowerFirst: lowerFirst,
    pad: pad,
    padEnd: padEnd,
    padStart: padStart,
    repeat: repeat,
    snakeCase: snakeCase,
    startCase: startCase,
    trim: trim,
    trimEnd: trimEnd,
    trimStart: trimStart,
    upperCase: upperCase,
    upperFirst: upperFirst,
    pluralize: pluralize,
    plural: pluralize.plural,
    singular: pluralize.singular,
    addPluralRule: pluralize.addPluralRule,
    addSingularRule: pluralize.addSingularRule,
    addIrregularRule: pluralize.addIrregularRule,
    addUncountableRule: pluralize.addUncountableRule,
    isPlural: pluralize.isPlural,
    isSingular: pluralize.isSingular,
};
//# sourceMappingURL=string-tools.js.map