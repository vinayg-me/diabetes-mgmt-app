"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jetpack = require("fs-jetpack");
var ramda_1 = require("ramda");
/**
 * Finds the version for the currently running CLI.
 *
 * @param toolbox Currently running toolbox.
 * @returns Version as a string.
 */
function getVersion(toolbox) {
    var directory = toolbox.runtime.defaultPlugin && toolbox.runtime.defaultPlugin.directory;
    if (!directory) {
        throw new Error('getVersion: Unknown CLI version (no src folder found)');
    }
    // go at most 5 directories up to find the package.json
    for (var i = 0; i < 5; i += 1) {
        var pkg = jetpack.path(directory, 'package.json');
        // if we find a package.json, we're done -- read the version and return it
        if (jetpack.exists(pkg) === 'file') {
            return jetpack.read(pkg, 'json').version;
        }
        // if we reach the git repo or root, we can't determine the version -- this is where we bail
        var git = jetpack.path(directory, '.git');
        var root = jetpack.path('/');
        if (directory === root || jetpack.exists(git) === 'dir') {
            break;
        }
        // go up another directory
        directory = jetpack.path(directory, '..');
    }
    throw new Error("getVersion: Unknown CLI version (no package.json found in " + directory);
}
exports.getVersion = getVersion;
/**
 * Is this a hidden command?
 */
var isHidden = ramda_1.propEq('hidden', true);
/**
 * Gets the list of plugins.
 *
 * @param toolbox The toolbox
 * @param plugins The plugins holding the commands
 * @param commandRoot Optional, only show commands with this root
 * @return List of plugins.
 */
function commandInfo(toolbox, commandRoot) {
    return ramda_1.pipe(ramda_1.reject(isHidden), ramda_1.reject(function (command) {
        if (!commandRoot) {
            return false;
        }
        return !ramda_1.equals(command.commandPath.slice(0, commandRoot.length), commandRoot);
    }), ramda_1.map(function (command) {
        var alias = command.hasAlias() ? "(" + command.aliases.join(', ') + ")" : '';
        return [
            command.commandPath.join(' ') + " " + alias,
            ramda_1.replace('$BRAND', toolbox.runtime.brand, command.description || '-'),
        ];
    }))(toolbox.runtime.commands);
}
exports.commandInfo = commandInfo;
//# sourceMappingURL=meta-tools.js.map