"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jetpack = require("fs-jetpack");
var ramda_1 = require("ramda");
var string_tools_1 = require("./string-tools");
var os = require("os");
var path = require("path");
/**
 * Is this a file?
 *
 * @param path The filename to check.
 * @returns `true` if the file exists and is a file, otherwise `false`.
 */
function isFile(path) {
    return jetpack.exists(path) === 'file';
}
/**
 * Is this not a file?
 *
 * @param path The filename to check
 * @return `true` if the file doesn't exist.
 */
var isNotFile = ramda_1.complement(isFile);
/**
 * Is this a directory?
 *
 * @param path The directory to check.
 * @returns True/false -- does the directory exist?
 */
function isDirectory(path) {
    return jetpack.exists(path) === 'dir';
}
/**
 * Is this not a directory?
 *
 * @param path The directory to check.
 * @return `true` if the directory does not exist, otherwise false.
 */
var isNotDirectory = ramda_1.complement(isDirectory);
/**
 * Gets the immediate subdirectories.
 *
 * @param path Path to a directory to check.
 * @param isRelative Return back the relative directory?
 * @param matching   A jetpack matching filter
 * @param symlinks  If true, will include any symlinks along the way.
 * @return A list of directories
 */
function subdirectories(path, isRelative, matching, symlinks) {
    if (isRelative === void 0) { isRelative = false; }
    if (matching === void 0) { matching = '*'; }
    if (symlinks === void 0) { symlinks = false; }
    if (string_tools_1.strings.isBlank(path) || !isDirectory(path)) {
        return [];
    }
    var dirs = jetpack.cwd(path).find({
        matching: matching,
        directories: true,
        recursive: false,
        files: false,
        symlinks: symlinks,
    });
    if (isRelative) {
        return dirs;
    }
    else {
        return ramda_1.map(ramda_1.concat(path + "/"), dirs);
    }
}
var filesystem = Object.assign({
    eol: os.EOL,
    homedir: os.homedir,
    separator: path.sep,
    subdirectories: subdirectories,
    isFile: isFile,
    isNotFile: isNotFile,
    isDirectory: isDirectory,
    isNotDirectory: isNotDirectory,
}, jetpack);
exports.filesystem = filesystem;
//# sourceMappingURL=filesystem-tools.js.map